{"ast":null,"code":"import _slicedToArray from \"/Users/chelseacrooke/Documents/HW/chelsea4crooke.github.io/ClickGame/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/chelseacrooke/Documents/HW/chelsea4crooke.github.io/ClickGame/src/App.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport Board from \"./components/Board/indexBoard\";\nimport Card from \"./components/Card\";\nimport Score from \"./components/Score\";\nimport turtles from \"./cards.json\";\nimport \"./App.css\";\n\nconst _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 1),\n      cards = _useState2[0];\n\nconst _useState3 = useState(400),\n      _useState4 = _slicedToArray(_useState3, 1),\n      dimens = _useState4[0];\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      turtles,\n      clickedTurtleIds: [],\n      score: 0,\n      goal: 8,\n      status: \"\"\n    };\n\n    this.shuffleScoreCard = id => {\n      let clickedTurtleIds = this.state.clickedTurtleIds;\n\n      if (clickedTurtleIds.includes(id)) {\n        this.setState({\n          clickedTurtleIds: [],\n          score: 0,\n          status: \"Game Over! You lost. Click to play again!\"\n        });\n        return;\n      } else {\n        clickedTurtleIds.push(id);\n\n        if (clickedTurtleIds.length === 8) {\n          this.setState({\n            score: 8,\n            status: \"You Won! Great Job, Smartie! Click to play again!\",\n            clickedTurtleIds: []\n          });\n          console.log('You Win');\n          return;\n        }\n\n        this.setState({\n          turtles,\n          clickedTurtleIds,\n          score: clickedTurtleIds.length,\n          status: \" \"\n        });\n\n        for (let i = turtles.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          var _ref = [turtles[j], turtles[i]];\n          turtles[i] = _ref[0];\n          turtles[j] = _ref[1];\n        }\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Do you remember the one you clicked before?\"), React.createElement(Board, {\n      dimens: dimens,\n      cards: cards,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chelseacrooke/Documents/HW/chelsea4crooke.github.io/ClickGame/src/App.js"],"names":["React","Component","useState","useEffect","Board","Card","Score","turtles","cards","dimens","App","state","clickedTurtleIds","score","goal","status","shuffleScoreCard","id","includes","setState","push","length","console","log","i","j","Math","floor","random","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,+BAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAO,WAAP;;kBAEgBL,QAAQ,CAAC,EAAD,C;;MAAjBM,K;;mBACUN,QAAQ,CAAC,GAAD,C;;MAAlBO,M;;AACP,MAAMC,GAAN,SAAkBT,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAGxBU,KAHwB,GAGhB;AACPJ,MAAAA,OADO;AAENK,MAAAA,gBAAgB,EAAE,EAFZ;AAGNC,MAAAA,KAAK,EAAE,CAHD;AAINC,MAAAA,IAAI,EAAE,CAJA;AAKNC,MAAAA,MAAM,EAAE;AALF,KAHgB;;AAAA,SAUxBC,gBAVwB,GAULC,EAAE,IAAI;AACvB,UAAIL,gBAAgB,GAAG,KAAKD,KAAL,CAAWC,gBAAlC;;AAEA,UAAGA,gBAAgB,CAACM,QAAjB,CAA0BD,EAA1B,CAAH,EAAiC;AAC/B,aAAKE,QAAL,CAAc;AAAEP,UAAAA,gBAAgB,EAAE,EAApB;AAAwBC,UAAAA,KAAK,EAAE,CAA/B;AAAkCE,UAAAA,MAAM,EAAG;AAA3C,SAAd;AACA;AACD,OAHD,MAGK;AACHH,QAAAA,gBAAgB,CAACQ,IAAjB,CAAsBH,EAAtB;;AAEA,YAAGL,gBAAgB,CAACS,MAAjB,KAA4B,CAA/B,EAAiC;AAC/B,eAAKF,QAAL,CAAc;AAACN,YAAAA,KAAK,EAAE,CAAR;AAAWE,YAAAA,MAAM,EAAE,mDAAnB;AAAwEH,YAAAA,gBAAgB,EAAE;AAA1F,WAAd;AACAU,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA;AACD;;AAED,aAAKJ,QAAL,CAAc;AAAEZ,UAAAA,OAAF;AAAWK,UAAAA,gBAAX;AAA6BC,UAAAA,KAAK,EAAED,gBAAgB,CAACS,MAArD;AAA6DN,UAAAA,MAAM,EAAE;AAArE,SAAd;;AAEA,aAAK,IAAIS,CAAC,GAAGjB,OAAO,CAACc,MAAR,GAAiB,CAA9B,EAAiCG,CAAC,GAAG,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;AAC3C,cAAIC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,CAAC,GAAG,CAArB,CAAX,CAAR;AAD2C,qBAEd,CAACjB,OAAO,CAACkB,CAAD,CAAR,EAAalB,OAAO,CAACiB,CAAD,CAApB,CAFc;AAEzCjB,UAAAA,OAAO,CAACiB,CAAD,CAFkC;AAE7BjB,UAAAA,OAAO,CAACkB,CAAD,CAFsB;AAG5C;AACF;AACF,KAhCuB;AAAA;;AAkC1BI,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDADF,EAEE,oBAAC,KAAD;AACE,MAAA,MAAM,EAAEpB,MADV;AAEE,MAAA,KAAK,EAAED,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAQE;;AA3CsB;;AA6C5B,eAAeE,GAAf","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport Board from \"./components/Board/indexBoard\";\nimport Card from \"./components/Card\";\nimport Score from \"./components/Score\";\nimport turtles from \"./cards.json\";\nimport \"./App.css\";\n  \nconst [cards] = useState([])\nconst [dimens] = useState(400)\nclass App extends Component {\n  \n    // Setting this.state turtle to the cards json array\n    state = {\n     turtles,\n      clickedTurtleIds: [],\n      score: 0,\n      goal: 8,\n      status: \"\"\n    };\n    shuffleScoreCard = id => {\n      let clickedTurtleIds = this.state.clickedTurtleIds;\n\n      if(clickedTurtleIds.includes(id)){\n        this.setState({ clickedTurtleIds: [], score: 0, status:  \"Game Over! You lost. Click to play again!\" });\n        return;\n      }else{\n        clickedTurtleIds.push(id)\n  \n        if(clickedTurtleIds.length === 8){\n          this.setState({score: 8, status: \"You Won! Great Job, Smartie! Click to play again!\", clickedTurtleIds: []});\n          console.log('You Win');\n          return;\n        }\n  \n        this.setState({ turtles, clickedTurtleIds, score: clickedTurtleIds.length, status: \" \" });\n  \n        for (let i = turtles.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n           [turtles[i], turtles[j]] =  [turtles[j], turtles[i]];\n        }\n      }\n    }\n\n  render(){\n    return(\n      <div>\n        <h2>Do you remember the one you clicked before?</h2>\n        <Board\n          dimens={dimens}\n          cards={cards}\n          />\n      </div>\n    )}\n  }\nexport default App;"]},"metadata":{},"sourceType":"module"}