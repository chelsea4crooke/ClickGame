{"ast":null,"code":"import _slicedToArray from \"/Users/chelseacrooke/Documents/HW/chelsea4crooke.github.io/ClickGame/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/chelseacrooke/Documents/HW/chelsea4crooke.github.io/ClickGame/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Board from \"./components/Board\";\nimport initalDeck from \"./deck\";\nexport default function App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        cards = _useState2[0],\n        setCards = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        flipped = _useState4[0],\n        setFlipped = _useState4[1];\n\n  const _useState5 = useState(400),\n        _useState6 = _slicedToArray(_useState5, 2),\n        dimens = _useState6[0],\n        setDimens = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        solved = _useState8[0],\n        setSolved = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        disables = _useState10[0],\n        setDisabled = _useState10[1];\n\n  useEffect(() => {\n    resizeBoard();\n    setCards(initalDeck());\n  }, []);\n  useEffect(() => {\n    const resizeList = window.addEventListener('resize', resizeBoard);\n    return () => window.removeEventListener('resize', resizeList);\n  });\n\n  const handleClick = id => {\n    setDisabled(true);\n\n    if (flipped.length === 0) {\n      setFlipped([id]);\n      setDisabled(false);\n    } else {\n      if (sameCardSelect(id)) return;\n      setFlipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id]);\n        resetCards();\n      } else {\n        setTimeout(resetCards, 4000);\n      }\n    }\n  };\n\n  const sameCardSelect = id => flipped.includes(id);\n\n  const resetCards = () => {\n    setFlipped([]);\n    setDisabled(false);\n  };\n\n  const isMatch = id => {\n    const isClicked = cards.find(card => card.id === id);\n    const cardFlip = cards.find(card => flipped[0] === card.id);\n    return cardFlip.type === isClicked.type;\n  };\n\n  const resizeBoard = () => {\n    setDimens(Math.min(document.documentElement.clientHeight, document.documentElement.clientWidth));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Do you remember the one you clicked before?\"), React.createElement(Board, {\n    dimens: dimens,\n    cards: cards,\n    flipped: flipped,\n    handleClick: handleClick,\n    disables: disables,\n    solved: solved,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n} // import React, { Component } from \"react\";\n// import Card from \"./components/Card\";\n// import Wrapper from \"./components/Wrapper\";\n// import Score from \"./components/Score\";\n// import turtles from \"./cards.json\";\n// import \"./App.css\";\n// class App extends Component {\n//   // Setting this.state kittens to the cards json array\n//   state = {\n//    turtles,\n//     clickedIds: [],\n//     score: 0,\n//     goal: 12,\n//     status: \"\"\n//   };\n//   //shuffle the turtles cards in the browser when clicked\n//   shuffleScoreCard = id => {\n//     let clickedIds = this.state.clickedIds;\n//     if(clickedIds.includes(id)){\n//       this.setState({ clickedTurtleIds: [], score: 0, status:  \"Game Over! You lost. Click to play again!\" });\n//       return;\n//     }else{\n//       clickedIds.push(id)\n//       if(clickedIds.length === 8){\n//         this.setState({score: 8, status: \"You Won! Great Job, Smartie! Click to play again!\", clickedTurtleIds: []});\n//         console.log('You Win');\n//         return;\n//       }\n//       this.setState({ turtles, clickedIds, score: clickedIds.length, status: \" \" });\n//       for (let i = turtles.length - 1; i > 0; i--) {\n//         let j = Math.floor(Math.random() * (i + 1));\n//          [turtles[i], turtles[j]] =  [turtles[j], turtles[i]];\n//       }\n//     }\n//   }\n//   // Map over this.state.cards and render a Card component for each card object\n//   render() {\n//     return (\n//       <div className=\"turtle\">\n//         <header className=\"turtle-header\">\n//           <h1 className=\"Turtle-title\">The Click</h1>\n//           <p className=\"Turtle-intro\">\n//             Try not to click the same image twice!\n//           </p>\n//         </header>\n//         <Score total={this.state.score}\n//                goal={8}\n//                status={this.state.status}\n//                />\n//         <Wrapper>\n//           {this.state.turtles.map(turtles => (\n//             <Card\n//               shuffleScoreCard={this.shuffleScoreCard}\n//               id={turtles.id}\n//               key={turtles.id}\n//               image={turtles.image}\n//             />\n//           ))}\n//         </Wrapper>\n//         <footer>\n//           <p>Designed and built by Chelsea Crooke. You can find the\n//           code<a href=\"https://chelsea4crooke.github.io/ClickGame/.\" target=\"_blank\" rel=\"noopener noreferrer\"> here</a>.</p>\n//         </footer>\n//     </div>\n//     );\n//   }\n// }\n// export default App;","map":{"version":3,"sources":["/Users/chelseacrooke/Documents/HW/chelsea4crooke.github.io/ClickGame/src/App.js"],"names":["React","useState","useEffect","Board","initalDeck","App","cards","setCards","flipped","setFlipped","dimens","setDimens","solved","setSolved","disables","setDisabled","resizeBoard","resizeList","window","addEventListener","removeEventListener","handleClick","id","length","sameCardSelect","isMatch","resetCards","setTimeout","includes","isClicked","find","card","cardFlip","type","Math","min","document","documentElement","clientHeight","clientWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Board from \"./components/Board\";\n\nimport initalDeck from \"./deck\"\nexport default function App(){\n  const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimens, setDimens] = useState(400)\n  const [solved, setSolved] = useState([])\n  const [disables, setDisabled] = useState(false)\n\n  useEffect(()=>{\n    resizeBoard()\n    setCards(initalDeck())\n  }, [])\n\n  useEffect(() =>{\n    const resizeList = window.addEventListener('resize', resizeBoard)\n\n    return () => window.removeEventListener('resize', resizeList)\n  })\n  const handleClick = (id) => {\n    setDisabled(true)\n    if(flipped.length === 0){\n      setFlipped([id])\n      setDisabled(false)\n    }else{\n      if(sameCardSelect(id))return\n      setFlipped([flipped[0], id])\n      if(isMatch(id)){\n        setSolved([...solved, flipped[0], id])\n        resetCards()\n      } else{\n        setTimeout(resetCards, 4000)\n      }\n    }\n  }\n\n  const sameCardSelect = (id) => flipped.includes(id)\n  const resetCards = () =>{\n    setFlipped([])\n    setDisabled(false)\n  }\n  const isMatch = (id) => {\n    const isClicked = cards.find((card) => card.id === id)\n    const cardFlip = cards.find((card) => flipped[0] === card.id)\n    return cardFlip.type === isClicked.type\n  }\n\n  const resizeBoard = () => {\n    setDimens(Math.min(document.documentElement.clientHeight, document.documentElement.clientWidth,\n      ),\n    )\n  }\n\n  return(\n    <div>\n      <h2>Do you remember the one you clicked before?</h2>\n      <Board\n        dimens={dimens}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick} \n        disables={disables}\n        solved={solved}\n        />\n    </div>\n  )\n}\n\n\n\n\n// import React, { Component } from \"react\";\n// import Card from \"./components/Card\";\n// import Wrapper from \"./components/Wrapper\";\n// import Score from \"./components/Score\";\n// import turtles from \"./cards.json\";\n// import \"./App.css\";\n\n// class App extends Component {\n//   // Setting this.state kittens to the cards json array\n//   state = {\n//    turtles,\n//     clickedIds: [],\n//     score: 0,\n//     goal: 12,\n//     status: \"\"\n//   };\n\n//   //shuffle the turtles cards in the browser when clicked\n//   shuffleScoreCard = id => {\n//     let clickedIds = this.state.clickedIds;\n\n//     if(clickedIds.includes(id)){\n//       this.setState({ clickedTurtleIds: [], score: 0, status:  \"Game Over! You lost. Click to play again!\" });\n//       return;\n//     }else{\n//       clickedIds.push(id)\n\n//       if(clickedIds.length === 8){\n//         this.setState({score: 8, status: \"You Won! Great Job, Smartie! Click to play again!\", clickedTurtleIds: []});\n//         console.log('You Win');\n//         return;\n//       }\n\n//       this.setState({ turtles, clickedIds, score: clickedIds.length, status: \" \" });\n\n//       for (let i = turtles.length - 1; i > 0; i--) {\n//         let j = Math.floor(Math.random() * (i + 1));\n//          [turtles[i], turtles[j]] =  [turtles[j], turtles[i]];\n//       }\n//     }\n//   }\n\n//   // Map over this.state.cards and render a Card component for each card object\n//   render() {\n//     return (\n//       <div className=\"turtle\">\n//         <header className=\"turtle-header\">\n//           <h1 className=\"Turtle-title\">The Click</h1>\n//           <p className=\"Turtle-intro\">\n//             Try not to click the same image twice!\n//           </p>\n//         </header>\n//         <Score total={this.state.score}\n//                goal={8}\n//                status={this.state.status}\n//                />\n//         <Wrapper>\n//           {this.state.turtles.map(turtles => (\n//             <Card\n//               shuffleScoreCard={this.shuffleScoreCard}\n//               id={turtles.id}\n//               key={turtles.id}\n//               image={turtles.image}\n//             />\n//           ))}\n//         </Wrapper>\n//         <footer>\n//           <p>Designed and built by Chelsea Crooke. You can find the\n//           code<a href=\"https://chelsea4crooke.github.io/ClickGame/.\" target=\"_blank\" rel=\"noopener noreferrer\"> here</a>.</p>\n//         </footer>\n//     </div>\n//     );\n//   }\n// }\n\n// export default App;\n"]},"metadata":{},"sourceType":"module"}