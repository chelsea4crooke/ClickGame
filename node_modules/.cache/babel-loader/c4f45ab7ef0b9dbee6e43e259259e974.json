{"ast":null,"code":"import _slicedToArray from \"/Users/chelseacrooke/Documents/HW/chelsea4crooke.github.io/ClickGame/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/chelseacrooke/Documents/HW/chelsea4crooke.github.io/ClickGame/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Board from \"./components/Board/indexBoard\";\nimport initalDeck from \"./deck\";\nexport default function App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        cards = _useState2[0],\n        Cards = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        flipped = _useState4[0],\n        Flipped = _useState4[1];\n\n  const _useState5 = useState(400),\n        _useState6 = _slicedToArray(_useState5, 2),\n        dimens = _useState6[0],\n        Dimens = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        solved = _useState8[0],\n        Solved = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        disables = _useState10[0],\n        Disabled = _useState10[1];\n\n  useEffect(() => {\n    resizeBoard();\n    Cards(initalDeck());\n  }, []);\n  useEffect(() => {\n    const resizeList = window.addEventListener('resize', resizeBoard);\n    return () => window.removeEventListener('resize', resizeList);\n  });\n\n  const handleClick = id => {\n    Disabled(true);\n\n    if (flipped.length === 0) {\n      Flipped([id]);\n      Disabled(false);\n    } else {\n      if (sameCardSelect(id)) return;\n      Flipped([flipped[0], id]);\n\n      if (isMatch(id)) {\n        Solved([...solved, flipped[0], id]);\n        resetCards();\n      } else {\n        setTimeout(resetCards, 4000);\n      }\n    }\n  };\n\n  const sameCardSelect = id => flipped.includes(id);\n\n  const resetCards = () => {\n    Flipped([]);\n    Disabled(false);\n  };\n\n  const isMatch = id => {\n    const isClicked = cards.find(card => card.id === id);\n    const cardFlip = cards.find(card => flipped[0] === card.id);\n    return cardFlip.type === isClicked.type;\n  };\n\n  const resizeBoard = () => {\n    Dimens(Math.min(document.documentElement.clientHeight, document.documentElement.clientWidth));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Do you remember the one you clicked before?\"), React.createElement(Board, {\n    dimens: dimens,\n    cards: cards,\n    flipped: flipped,\n    handleClick: handleClick,\n    disables: disables,\n    solved: solved,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/chelseacrooke/Documents/HW/chelsea4crooke.github.io/ClickGame/src/App.js"],"names":["React","useState","useEffect","Board","initalDeck","App","cards","Cards","flipped","Flipped","dimens","Dimens","solved","Solved","disables","Disabled","resizeBoard","resizeList","window","addEventListener","removeEventListener","handleClick","id","length","sameCardSelect","isMatch","resetCards","setTimeout","includes","isClicked","find","card","cardFlip","type","Math","min","document","documentElement","clientHeight","clientWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Board from \"./components/Board/indexBoard\";\n\nimport initalDeck from \"./deck\"\nexport default function App(){\n  const [cards, Cards] = useState([])\n  const [flipped, Flipped] = useState([])\n  const [dimens, Dimens] = useState(400)\n  const [solved, Solved] = useState([])\n  const [disables, Disabled] = useState(false)\n\n  useEffect(()=>{\n    resizeBoard()\n    Cards(initalDeck())\n  }, [])\n\n  useEffect(() =>{\n    const resizeList = window.addEventListener('resize', resizeBoard)\n\n    return () => window.removeEventListener('resize', resizeList)\n  })\n  const handleClick = (id) => {\n    Disabled(true)\n    if(flipped.length === 0){\n      Flipped([id])\n      Disabled(false)\n    }else{\n      if(sameCardSelect(id))return\n      Flipped([flipped[0], id])\n      if(isMatch(id)){\n        Solved([...solved, flipped[0], id])\n        resetCards()\n      } else{\n        setTimeout(resetCards, 4000)\n      }\n    }\n  }\n\n  const sameCardSelect = (id) => flipped.includes(id)\n  const resetCards = () =>{\n    Flipped([])\n    Disabled(false)\n  }\n  const isMatch = (id) => {\n    const isClicked = cards.find((card) => card.id === id)\n    const cardFlip = cards.find((card) => flipped[0] === card.id)\n    return cardFlip.type === isClicked.type\n  }\n\n  const resizeBoard = () => {\n    Dimens(Math.min(document.documentElement.clientHeight, document.documentElement.clientWidth,\n      ),\n    )\n  }\n\n  return(\n    <div>\n      <h2>Do you remember the one you clicked before?</h2>\n      <Board\n        dimens={dimens}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick} \n        disables={disables}\n        solved={solved}\n        />\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}