{"ast":null,"code":"import _slicedToArray from \"/Users/chelseacrooke/Documents/HW/chelsea4crooke.github.io/ClickGame/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/chelseacrooke/Documents/HW/chelsea4crooke.github.io/ClickGame/src/App.js\";\nimport React, { Component, useState } from \"react\";\nimport Board from \"./components/Board/indexBoard\";\nimport Card from \"./components/Card\";\nimport { Score } from \"./components/Score\";\nimport turtles from \"./cards.json\";\nimport \"./App.css\";\n\nconst _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 1),\n      cards = _useState2[0];\n\nconst _useState3 = useState(400),\n      _useState4 = _slicedToArray(_useState3, 1),\n      dimens = _useState4[0];\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      turtles,\n      clickedTurtleIds: [],\n      score: 0,\n      goal: 12,\n      status: \"\"\n    };\n\n    this.shuffleScoreCard = id => {\n      let clickedTurtleIds = this.state.clickedTurtleIds;\n\n      if (clickedTurtleIds.includes(id)) {\n        this.setState({\n          clickedTurtleIds: [],\n          score: 0,\n          status: \"Game Over! You lost. Click to play again!\"\n        });\n        return;\n      } else {\n        clickedTurtleIds.push(id);\n\n        if (clickedTurtleIds.length === 8) {\n          this.setState({\n            score: 12,\n            status: \"Smartie pants! What a good memory!! Click to play again!\",\n            clickedTurtleIds: []\n          });\n          return;\n        }\n\n        this.setState({\n          turtles,\n          clickedTurtleIds,\n          score: clickedTurtleIds.length,\n          status: \" \"\n        });\n\n        for (let i = turtles.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          var _ref = [turtles[j], turtles[i]];\n          turtles[i] = _ref[0];\n          turtles[j] = _ref[1];\n        }\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Start Clicking\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Do you remember the one you clicked before?\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \" Don't click the same image twice, or else!\"), React.createElement(\"div\", {\n      className: \"scores\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Score, {\n      total: this.state.score,\n      goal: 12,\n      status: this.state.status,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })), React.createElement(Board, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, this.state.turtles.map(turtles => React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"shuffleScoreCard=\", this.shuffleScoreCard, \"id=\", turtles.id, \"key=\", turtles.id, \"image=\", turtles.image))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chelseacrooke/Documents/HW/chelsea4crooke.github.io/ClickGame/src/App.js"],"names":["React","Component","useState","Board","Card","Score","turtles","cards","dimens","App","state","clickedTurtleIds","score","goal","status","shuffleScoreCard","id","includes","setState","push","length","i","j","Math","floor","random","render","map","image"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport Board from \"./components/Board/indexBoard\";\nimport Card from \"./components/Card\";\nimport { Score } from \"./components/Score\";\nimport turtles from \"./cards.json\";\nimport \"./App.css\";\n  \nconst [cards] = useState([])\nconst [dimens] = useState(400)\nclass App extends Component {\n  \n    // Setting this.state turtle to the cards json array\n    state = {\n     turtles,\n      clickedTurtleIds: [],\n      score: 0,\n      goal: 12,\n      status: \"\"\n    };\n    shuffleScoreCard = id => {\n      let clickedTurtleIds = this.state.clickedTurtleIds;\n\n      if(clickedTurtleIds.includes(id)){\n        this.setState({ clickedTurtleIds: [], score: 0, status:  \"Game Over! You lost. Click to play again!\" });\n        return;\n      }else{\n        clickedTurtleIds.push(id)\n  \n        if(clickedTurtleIds.length === 8){\n          this.setState({score: 12, status: \"Smartie pants! What a good memory!! Click to play again!\", clickedTurtleIds: []});\n          return;\n        }\n  \n        this.setState({ turtles, clickedTurtleIds, score: clickedTurtleIds.length, status: \" \" });\n  \n        for (let i = turtles.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n           [turtles[i], turtles[j]] =  [turtles[j], turtles[i]];\n        }\n      }\n    }\n\n  render(){\n    return(\n      <div className= \"App\">\n        <h1>Start Clicking</h1>\n        <h2>Do you remember the one you clicked before?</h2>\n        <h3> Don't click the same image twice, or else!</h3>\n        <div className=\"scores\">\n          <Score total={this.state.score}\n          goal={12}\n          status={this.state.status}/>\n          </div>\n          <Board>\n            {this.state.turtles.map(turtles => (\n         \n            <Card>\n               shuffleScoreCard={this.shuffleScoreCard}\n                id={turtles.id}\n                 key={turtles.id}\n                image={turtles.image}\n            </Card>\n            ))}\n          </Board>\n        </div>  \n    )}\n  }\nexport default App;"]},"metadata":{},"sourceType":"module"}